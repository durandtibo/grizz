{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>A library to generate custom reports of pandas DataFrames.</p>"},{"location":"#api-stability","title":"API stability","text":"<p> While <code>grizz</code> is in development stage, no API is guaranteed to be stable from one release to the next. In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release. In practice, this means that upgrading <code>grizz</code> to a new version will possibly break any code that was using the old version of <code>grizz</code>.</p>"},{"location":"#license","title":"License","text":"<p><code>grizz</code> is licensed under BSD 3-Clause \"New\" or \"Revised\" license available in LICENSE file.</p>"},{"location":"get_started/","title":"Get Started","text":"<p>It is highly recommended to install in a virtual environment to keep your system in order.</p>"},{"location":"get_started/#installing-with-pip-recommended","title":"Installing with <code>pip</code> (recommended)","text":"<p>The following command installs the latest version of the library:</p> <pre><code>pip install grizz\n</code></pre> <p>To make the package as slim as possible, only the packages required to use <code>grizz</code> are installed. It is possible to install all the optional dependencies by running the following command:</p> <pre><code>pip install 'grizz[all]'\n</code></pre>"},{"location":"get_started/#installing-from-source","title":"Installing from source","text":"<p>To install <code>grizz</code> from source, you can follow the steps below. First, you will need to install <code>poetry</code>. <code>poetry</code> is used to manage and install the dependencies. If <code>poetry</code> is already installed on your machine, you can skip this step. There are several ways to install <code>poetry</code> so you can use the one that you prefer. You can check the <code>poetry</code> installation by running the following command:</p> <pre><code>poetry --version\n</code></pre> <p>Then, you can clone the git repository:</p> <pre><code>git clone git@github.com:durandtibo/grizz.git\n</code></pre> <p>It is recommended to create a Python 3.8+ virtual environment. This step is optional so you can skip it. To create a virtual environment, you can use the following command:</p> <pre><code>make conda\n</code></pre> <p>It automatically creates a conda virtual environment. When the virtual environment is created, you can activate it with the following command:</p> <pre><code>conda activate grizz\n</code></pre> <p>This example uses <code>conda</code> to create a virtual environment, but you can use other tools or configurations. Then, you should install the required package to use <code>grizz</code> with the following command:</p> <pre><code>make install\n</code></pre> <p>This command will install all the required packages. You can also use this command to update the required packages. This command will check if there is a more recent package available and will install it. Finally, you can test the installation with the following command:</p> <pre><code>make unit-test-cov\n</code></pre>"},{"location":"refs/ingestor/","title":"ingestor","text":""},{"location":"refs/ingestor/#grizz.ingestor","title":"grizz.ingestor","text":"<p>Contain data ingestors.</p>"},{"location":"refs/ingestor/#grizz.ingestor.BaseIngestor","title":"grizz.ingestor.BaseIngestor","text":"<p>               Bases: <code>ABC</code></p> <p>Define the base class to implement a DataFrame ingestor.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import ParquetIngestor\n&gt;&gt;&gt; ingestor = ParquetIngestor(path=\"/path/to/frame.parquet\")\n&gt;&gt;&gt; ingestor\nParquetIngestor(path=/path/to/frame.parquet)\n&gt;&gt;&gt; frame = ingestor.ingest()  # doctest: +SKIP\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.BaseIngestor.ingest","title":"grizz.ingestor.BaseIngestor.ingest","text":"<pre><code>ingest() -&gt; DataFrame\n</code></pre> <p>Ingest a DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The ingested DataFrame.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import ParquetIngestor\n&gt;&gt;&gt; ingestor = ParquetIngestor(path=\"/path/to/frame.parquet\")\n&gt;&gt;&gt; frame = ingestor.ingest()  # doctest: +SKIP\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.ClickHouseIngestor","title":"grizz.ingestor.ClickHouseIngestor","text":"<p>               Bases: <code>BaseIngestor</code></p> <p>Implement a clickhouse DataFrame ingestor.</p> <p>This ingestor requires <code>clickhouse_connect</code> and <code>pyarrow</code>.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The query to get the data.</p> required <code>client</code> <code>Client | dict</code> <p>The clickhouse client or its configuration. Please check the documentation of <code>clickhouse_connect.get_client</code> to get more information.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import ClickHouseIngestor\n&gt;&gt;&gt; import clickhouse_connect\n&gt;&gt;&gt; client = clickhouse_connect.get_client()  # doctest: +SKIP\n&gt;&gt;&gt; ingestor = ClickHouseIngestor(query=\"\", client=client)  # doctest: +SKIP\n&gt;&gt;&gt; frame = ingestor.ingest()  # doctest: +SKIP\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.CsvIngestor","title":"grizz.ingestor.CsvIngestor","text":"<p>               Bases: <code>BaseIngestor</code></p> <p>Implement a CSV DataFrame ingestor.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str</code> <p>The path to the CSV file to ingest.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for <code>polars.read_csv</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import CsvIngestor\n&gt;&gt;&gt; ingestor = CsvIngestor(path=\"/path/to/frame.csv\")\n&gt;&gt;&gt; ingestor\nCsvIngestor(path=/path/to/frame.csv)\n&gt;&gt;&gt; frame = ingestor.ingest()  # doctest: +SKIP\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.Ingestor","title":"grizz.ingestor.Ingestor","text":"<p>               Bases: <code>BaseIngestor</code></p> <p>Implement a simple DataFrame ingestor.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>DataFrame</code> <p>The DataFrame to ingest.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.ingestor import Ingestor\n&gt;&gt;&gt; ingestor = Ingestor(\n...     frame=pl.DataFrame(\n...         {\n...             \"col1\": [1, 2, 3, 4, 5],\n...             \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...             \"col3\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...             \"col4\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...         }\n...     )\n... )\n&gt;&gt;&gt; ingestor\nIngestor(shape=(5, 4))\n&gt;&gt;&gt; frame = ingestor.ingest()\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.ParquetIngestor","title":"grizz.ingestor.ParquetIngestor","text":"<p>               Bases: <code>BaseIngestor</code></p> <p>Implement a parquet DataFrame ingestor.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str</code> <p>The path to the parquet file to ingest.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for <code>polars.read_parquet</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import ParquetIngestor\n&gt;&gt;&gt; ingestor = ParquetIngestor(path=\"/path/to/frame.parquet\")\n&gt;&gt;&gt; ingestor\nParquetIngestor(path=/path/to/frame.parquet)\n&gt;&gt;&gt; frame = ingestor.ingest()  # doctest: +SKIP\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.is_ingestor_config","title":"grizz.ingestor.is_ingestor_config","text":"<pre><code>is_ingestor_config(config: dict) -&gt; bool\n</code></pre> <p>Indicate if the input configuration is a configuration for a <code>BaseIngestor</code>.</p> <p>This function only checks if the value of the key  <code>_target_</code> is valid. It does not check the other values. If <code>_target_</code> indicates a function, the returned type hint is used to check the class.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>The configuration to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the input configuration is a configuration for a <code>BaseIngestor</code> object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import is_ingestor_config\n&gt;&gt;&gt; is_ingestor_config(\n...     {\"_target_\": \"grizz.ingestor.CsvIngestor\", \"path\": \"/path/to/data.csv\"}\n... )\nTrue\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.setup_ingestor","title":"grizz.ingestor.setup_ingestor","text":"<pre><code>setup_ingestor(\n    ingestor: BaseIngestor | dict,\n) -&gt; BaseIngestor\n</code></pre> <p>Set up an ingestor.</p> <p>The ingestor is instantiated from its configuration by using the <code>BaseIngestor</code> factory function.</p> <p>Parameters:</p> Name Type Description Default <code>ingestor</code> <code>BaseIngestor | dict</code> <p>Specifies an ingestor or its configuration.</p> required <p>Returns:</p> Type Description <code>BaseIngestor</code> <p>An instantiated ingestor.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import setup_ingestor\n&gt;&gt;&gt; ingestor = setup_ingestor(\n...     {\"_target_\": \"grizz.ingestor.CsvIngestor\", \"path\": \"/path/to/data.csv\"}\n... )\n&gt;&gt;&gt; ingestor\nCsvIngestor(path=/path/to/data.csv)\n</code></pre>"},{"location":"refs/utils/","title":"utils","text":""},{"location":"refs/utils/#grizz.utils","title":"grizz.utils","text":"<p>Contain utility functions.</p>"}]}