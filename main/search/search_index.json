{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>A library to generate custom reports of pandas DataFrames.</p>"},{"location":"#api-stability","title":"API stability","text":"<p> While <code>grizz</code> is in development stage, no API is guaranteed to be stable from one release to the next. In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release. In practice, this means that upgrading <code>grizz</code> to a new version will possibly break any code that was using the old version of <code>grizz</code>.</p>"},{"location":"#license","title":"License","text":"<p><code>grizz</code> is licensed under BSD 3-Clause \"New\" or \"Revised\" license available in LICENSE file.</p>"},{"location":"get_started/","title":"Get Started","text":"<p>It is highly recommended to install in a virtual environment to keep your system in order.</p>"},{"location":"get_started/#installing-with-pip-recommended","title":"Installing with <code>pip</code> (recommended)","text":"<p>The following command installs the latest version of the library:</p> <pre><code>pip install grizz\n</code></pre> <p>To make the package as slim as possible, only the packages required to use <code>grizz</code> are installed. It is possible to install all the optional dependencies by running the following command:</p> <pre><code>pip install 'grizz[all]'\n</code></pre>"},{"location":"get_started/#installing-from-source","title":"Installing from source","text":"<p>To install <code>grizz</code> from source, you can follow the steps below. First, you will need to install <code>poetry</code>. <code>poetry</code> is used to manage and install the dependencies. If <code>poetry</code> is already installed on your machine, you can skip this step. There are several ways to install <code>poetry</code> so you can use the one that you prefer. You can check the <code>poetry</code> installation by running the following command:</p> <pre><code>poetry --version\n</code></pre> <p>Then, you can clone the git repository:</p> <pre><code>git clone git@github.com:durandtibo/grizz.git\n</code></pre> <p>It is recommended to create a Python 3.8+ virtual environment. This step is optional so you can skip it. To create a virtual environment, you can use the following command:</p> <pre><code>make conda\n</code></pre> <p>It automatically creates a conda virtual environment. When the virtual environment is created, you can activate it with the following command:</p> <pre><code>conda activate grizz\n</code></pre> <p>This example uses <code>conda</code> to create a virtual environment, but you can use other tools or configurations. Then, you should install the required package to use <code>grizz</code> with the following command:</p> <pre><code>make install\n</code></pre> <p>This command will install all the required packages. You can also use this command to update the required packages. This command will check if there is a more recent package available and will install it. Finally, you can test the installation with the following command:</p> <pre><code>make unit-test-cov\n</code></pre>"},{"location":"refs/ingestor/","title":"ingestor","text":""},{"location":"refs/ingestor/#grizz.ingestor","title":"grizz.ingestor","text":"<p>Contain data ingestors.</p>"},{"location":"refs/ingestor/#grizz.ingestor.BaseIngestor","title":"grizz.ingestor.BaseIngestor","text":"<p>               Bases: <code>ABC</code></p> <p>Define the base class to implement a DataFrame ingestor.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import ParquetIngestor\n&gt;&gt;&gt; ingestor = ParquetIngestor(path=\"/path/to/frame.parquet\")\n&gt;&gt;&gt; ingestor\nParquetIngestor(path=/path/to/frame.parquet)\n&gt;&gt;&gt; frame = ingestor.ingest()  # doctest: +SKIP\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.BaseIngestor.ingest","title":"grizz.ingestor.BaseIngestor.ingest","text":"<pre><code>ingest() -&gt; DataFrame\n</code></pre> <p>Ingest a DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The ingested DataFrame.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import ParquetIngestor\n&gt;&gt;&gt; ingestor = ParquetIngestor(path=\"/path/to/frame.parquet\")\n&gt;&gt;&gt; frame = ingestor.ingest()  # doctest: +SKIP\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.ClickHouseIngestor","title":"grizz.ingestor.ClickHouseIngestor","text":"<p>               Bases: <code>BaseIngestor</code></p> <p>Implement a clickhouse DataFrame ingestor.</p> <p>This ingestor requires <code>clickhouse_connect</code> and <code>pyarrow</code>.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The query to get the data.</p> required <code>client</code> <code>Client | dict</code> <p>The clickhouse client or its configuration. Please check the documentation of <code>clickhouse_connect.get_client</code> to get more information.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import ClickHouseIngestor\n&gt;&gt;&gt; import clickhouse_connect\n&gt;&gt;&gt; client = clickhouse_connect.get_client()  # doctest: +SKIP\n&gt;&gt;&gt; ingestor = ClickHouseIngestor(query=\"\", client=client)  # doctest: +SKIP\n&gt;&gt;&gt; frame = ingestor.ingest()  # doctest: +SKIP\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.CsvIngestor","title":"grizz.ingestor.CsvIngestor","text":"<p>               Bases: <code>BaseIngestor</code></p> <p>Implement a CSV DataFrame ingestor.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str</code> <p>The path to the CSV file to ingest.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for <code>polars.read_csv</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import CsvIngestor\n&gt;&gt;&gt; ingestor = CsvIngestor(path=\"/path/to/frame.csv\")\n&gt;&gt;&gt; ingestor\nCsvIngestor(path=/path/to/frame.csv)\n&gt;&gt;&gt; frame = ingestor.ingest()  # doctest: +SKIP\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.Ingestor","title":"grizz.ingestor.Ingestor","text":"<p>               Bases: <code>BaseIngestor</code></p> <p>Implement a simple DataFrame ingestor.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>DataFrame</code> <p>The DataFrame to ingest.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.ingestor import Ingestor\n&gt;&gt;&gt; ingestor = Ingestor(\n...     frame=pl.DataFrame(\n...         {\n...             \"col1\": [1, 2, 3, 4, 5],\n...             \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...             \"col3\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...             \"col4\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...         }\n...     )\n... )\n&gt;&gt;&gt; ingestor\nIngestor(shape=(5, 4))\n&gt;&gt;&gt; frame = ingestor.ingest()\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.ParquetIngestor","title":"grizz.ingestor.ParquetIngestor","text":"<p>               Bases: <code>BaseIngestor</code></p> <p>Implement a parquet DataFrame ingestor.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str</code> <p>The path to the parquet file to ingest.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for <code>polars.read_parquet</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import ParquetIngestor\n&gt;&gt;&gt; ingestor = ParquetIngestor(path=\"/path/to/frame.parquet\")\n&gt;&gt;&gt; ingestor\nParquetIngestor(path=/path/to/frame.parquet)\n&gt;&gt;&gt; frame = ingestor.ingest()  # doctest: +SKIP\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.is_ingestor_config","title":"grizz.ingestor.is_ingestor_config","text":"<pre><code>is_ingestor_config(config: dict) -&gt; bool\n</code></pre> <p>Indicate if the input configuration is a configuration for a <code>BaseIngestor</code>.</p> <p>This function only checks if the value of the key  <code>_target_</code> is valid. It does not check the other values. If <code>_target_</code> indicates a function, the returned type hint is used to check the class.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>The configuration to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the input configuration is a configuration for a <code>BaseIngestor</code> object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import is_ingestor_config\n&gt;&gt;&gt; is_ingestor_config(\n...     {\"_target_\": \"grizz.ingestor.CsvIngestor\", \"path\": \"/path/to/data.csv\"}\n... )\nTrue\n</code></pre>"},{"location":"refs/ingestor/#grizz.ingestor.setup_ingestor","title":"grizz.ingestor.setup_ingestor","text":"<pre><code>setup_ingestor(\n    ingestor: BaseIngestor | dict,\n) -&gt; BaseIngestor\n</code></pre> <p>Set up an ingestor.</p> <p>The ingestor is instantiated from its configuration by using the <code>BaseIngestor</code> factory function.</p> <p>Parameters:</p> Name Type Description Default <code>ingestor</code> <code>BaseIngestor | dict</code> <p>Specifies an ingestor or its configuration.</p> required <p>Returns:</p> Type Description <code>BaseIngestor</code> <p>An instantiated ingestor.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from grizz.ingestor import setup_ingestor\n&gt;&gt;&gt; ingestor = setup_ingestor(\n...     {\"_target_\": \"grizz.ingestor.CsvIngestor\", \"path\": \"/path/to/data.csv\"}\n... )\n&gt;&gt;&gt; ingestor\nCsvIngestor(path=/path/to/data.csv)\n</code></pre>"},{"location":"refs/transformer/","title":"transformer","text":""},{"location":"refs/transformer/#grizz.transformer","title":"grizz.transformer","text":"<p>Contain <code>polars.DataFrame</code> transformers.</p>"},{"location":"refs/transformer/#grizz.transformer.BaseColumnsTransformer","title":"grizz.transformer.BaseColumnsTransformer","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Define a base class to implement transformers that apply the same transformation on multiple columns.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str] | None</code> <p>The columns to prepare. If <code>None</code>, it processes all the columns of type string.</p> <code>None</code> <code>ignore_missing</code> <code>bool</code> <p>If <code>False</code>, an exception is raised if a column is missing, otherwise just a warning message is shown.</p> <code>False</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import StripChars\n&gt;&gt;&gt; transformer = StripChars(columns=[\"col2\", \"col3\"])\n&gt;&gt;&gt; transformer\nStripCharsTransformer(columns=('col2', 'col3'), ignore_missing=False)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [1, 2, 3, 4, 5],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"a \", \" b\", \"  c  \", \"d\", \"e\"],\n...         \"col4\": [\"a \", \" b\", \"  c  \", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3  \u2506 col4  \u2502\n\u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2502\n\u2502 i64  \u2506 str  \u2506 str   \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 a     \u2506 a     \u2502\n\u2502 2    \u2506 2    \u2506  b    \u2506  b    \u2502\n\u2502 3    \u2506 3    \u2506   c   \u2506   c   \u2502\n\u2502 4    \u2506 4    \u2506 d     \u2506 d     \u2502\n\u2502 5    \u2506 5    \u2506 e     \u2506 e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4  \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---   \u2502\n\u2502 i64  \u2506 str  \u2506 str  \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 a    \u2506 a     \u2502\n\u2502 2    \u2506 2    \u2506 b    \u2506  b    \u2502\n\u2502 3    \u2506 3    \u2506 c    \u2506   c   \u2502\n\u2502 4    \u2506 4    \u2506 d    \u2506 d     \u2502\n\u2502 5    \u2506 5    \u2506 e    \u2506 e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.BaseTransformer","title":"grizz.transformer.BaseTransformer","text":"<p>               Bases: <code>ABC</code></p> <p>Define the base class to transform a <code>polars.DataFrame</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import Cast\n&gt;&gt;&gt; transformer = Cast(columns=[\"col1\", \"col3\"], dtype=pl.Int32)\n&gt;&gt;&gt; transformer\nCastTransformer(columns=('col1', 'col3'), dtype=Int32, ignore_missing=False)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [1, 2, 3, 4, 5],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col4\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 str  \u2506 str  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 1    \u2506 a    \u2502\n\u2502 2    \u2506 2    \u2506 2    \u2506 b    \u2502\n\u2502 3    \u2506 3    \u2506 3    \u2506 c    \u2502\n\u2502 4    \u2506 4    \u2506 4    \u2506 d    \u2502\n\u2502 5    \u2506 5    \u2506 5    \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i32  \u2506 str  \u2506 i32  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 1    \u2506 a    \u2502\n\u2502 2    \u2506 2    \u2506 2    \u2506 b    \u2502\n\u2502 3    \u2506 3    \u2506 3    \u2506 c    \u2502\n\u2502 4    \u2506 4    \u2506 4    \u2506 d    \u2502\n\u2502 5    \u2506 5    \u2506 5    \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.BaseTransformer.transform","title":"grizz.transformer.BaseTransformer.transform","text":"<pre><code>transform(frame: DataFrame) -&gt; DataFrame\n</code></pre> <p>Transform the data in the <code>polars.DataFrame</code>.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>DataFrame</code> <p>The <code>polars.DataFrame</code> to transform.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The transformed DataFrame.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import Cast\n&gt;&gt;&gt; transformer = Cast(columns=[\"col1\", \"col3\"], dtype=pl.Int32)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [1, 2, 3, 4, 5],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col4\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 str  \u2506 str  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 1    \u2506 a    \u2502\n\u2502 2    \u2506 2    \u2506 2    \u2506 b    \u2502\n\u2502 3    \u2506 3    \u2506 3    \u2506 c    \u2502\n\u2502 4    \u2506 4    \u2506 4    \u2506 d    \u2502\n\u2502 5    \u2506 5    \u2506 5    \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i32  \u2506 str  \u2506 i32  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 1    \u2506 a    \u2502\n\u2502 2    \u2506 2    \u2506 2    \u2506 b    \u2502\n\u2502 3    \u2506 3    \u2506 3    \u2506 c    \u2502\n\u2502 4    \u2506 4    \u2506 4    \u2506 d    \u2502\n\u2502 5    \u2506 5    \u2506 5    \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.Cast","title":"grizz.transformer.Cast","text":"<p>               Bases: <code>BaseColumnsTransformer</code></p> <p>Implement a transformer to convert some columns to a new data type.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str]</code> <p>The columns to convert.</p> required <code>dtype</code> <code>type[DataType]</code> <p>The target data type.</p> required <code>ignore_missing</code> <code>bool</code> <p>If <code>False</code>, an exception is raised if a column is missing, otherwise just a warning message is shown.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments for <code>cast</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import Cast\n&gt;&gt;&gt; transformer = Cast(columns=[\"col1\", \"col3\"], dtype=pl.Int32)\n&gt;&gt;&gt; transformer\nCastTransformer(columns=('col1', 'col3'), dtype=Int32, ignore_missing=False)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [1, 2, 3, 4, 5],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col4\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 str  \u2506 str  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 1    \u2506 a    \u2502\n\u2502 2    \u2506 2    \u2506 2    \u2506 b    \u2502\n\u2502 3    \u2506 3    \u2506 3    \u2506 c    \u2502\n\u2502 4    \u2506 4    \u2506 4    \u2506 d    \u2502\n\u2502 5    \u2506 5    \u2506 5    \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i32  \u2506 str  \u2506 i32  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 1    \u2506 a    \u2502\n\u2502 2    \u2506 2    \u2506 2    \u2506 b    \u2502\n\u2502 3    \u2506 3    \u2506 3    \u2506 c    \u2502\n\u2502 4    \u2506 4    \u2506 4    \u2506 d    \u2502\n\u2502 5    \u2506 5    \u2506 5    \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.CastTransformer","title":"grizz.transformer.CastTransformer","text":"<p>               Bases: <code>BaseColumnsTransformer</code></p> <p>Implement a transformer to convert some columns to a new data type.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str]</code> <p>The columns to convert.</p> required <code>dtype</code> <code>type[DataType]</code> <p>The target data type.</p> required <code>ignore_missing</code> <code>bool</code> <p>If <code>False</code>, an exception is raised if a column is missing, otherwise just a warning message is shown.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments for <code>cast</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import Cast\n&gt;&gt;&gt; transformer = Cast(columns=[\"col1\", \"col3\"], dtype=pl.Int32)\n&gt;&gt;&gt; transformer\nCastTransformer(columns=('col1', 'col3'), dtype=Int32, ignore_missing=False)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [1, 2, 3, 4, 5],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col4\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 str  \u2506 str  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 1    \u2506 a    \u2502\n\u2502 2    \u2506 2    \u2506 2    \u2506 b    \u2502\n\u2502 3    \u2506 3    \u2506 3    \u2506 c    \u2502\n\u2502 4    \u2506 4    \u2506 4    \u2506 d    \u2502\n\u2502 5    \u2506 5    \u2506 5    \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i32  \u2506 str  \u2506 i32  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 1    \u2506 a    \u2502\n\u2502 2    \u2506 2    \u2506 2    \u2506 b    \u2502\n\u2502 3    \u2506 3    \u2506 3    \u2506 c    \u2502\n\u2502 4    \u2506 4    \u2506 4    \u2506 d    \u2502\n\u2502 5    \u2506 5    \u2506 5    \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.Diff","title":"grizz.transformer.Diff","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer to compute the first discrete difference between shifted items.</p> <p>Parameters:</p> Name Type Description Default <code>in_col</code> <code>str</code> <p>The input column name.</p> required <code>out_col</code> <code>str</code> <p>The output column name.</p> required <code>shift</code> <code>int</code> <p>The number of slots to shift.</p> <code>1</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import Diff\n&gt;&gt;&gt; transformer = Diff(in_col=\"col1\", out_col=\"diff\")\n&gt;&gt;&gt; transformer\nDiffTransformer(in_col=col1, out_col=diff, shift=1)\n&gt;&gt;&gt; frame = pl.DataFrame({\"col1\": [1, 2, 3, 4, 5], \"col2\": [\"a\", \"b\", \"c\", \"d\", \"e\"]})\n&gt;&gt;&gt; frame\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2502\n\u2502 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 a    \u2502\n\u2502 2    \u2506 b    \u2502\n\u2502 3    \u2506 c    \u2502\n\u2502 4    \u2506 d    \u2502\n\u2502 5    \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 diff \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 str  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 a    \u2506 null \u2502\n\u2502 2    \u2506 b    \u2506 1    \u2502\n\u2502 3    \u2506 c    \u2506 1    \u2502\n\u2502 4    \u2506 d    \u2506 1    \u2502\n\u2502 5    \u2506 e    \u2506 1    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.DiffTransformer","title":"grizz.transformer.DiffTransformer","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer to compute the first discrete difference between shifted items.</p> <p>Parameters:</p> Name Type Description Default <code>in_col</code> <code>str</code> <p>The input column name.</p> required <code>out_col</code> <code>str</code> <p>The output column name.</p> required <code>shift</code> <code>int</code> <p>The number of slots to shift.</p> <code>1</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import Diff\n&gt;&gt;&gt; transformer = Diff(in_col=\"col1\", out_col=\"diff\")\n&gt;&gt;&gt; transformer\nDiffTransformer(in_col=col1, out_col=diff, shift=1)\n&gt;&gt;&gt; frame = pl.DataFrame({\"col1\": [1, 2, 3, 4, 5], \"col2\": [\"a\", \"b\", \"c\", \"d\", \"e\"]})\n&gt;&gt;&gt; frame\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2502\n\u2502 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 a    \u2502\n\u2502 2    \u2506 b    \u2502\n\u2502 3    \u2506 c    \u2502\n\u2502 4    \u2506 d    \u2502\n\u2502 5    \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 diff \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 str  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 a    \u2506 null \u2502\n\u2502 2    \u2506 b    \u2506 1    \u2502\n\u2502 3    \u2506 c    \u2506 1    \u2502\n\u2502 4    \u2506 d    \u2506 1    \u2502\n\u2502 5    \u2506 e    \u2506 1    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.Function","title":"grizz.transformer.Function","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer that is a wrapper around a function to transform the DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[[DataFrame], DataFrame]</code> <p>The function to transform the DataFrame.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import FunctionTransformer\n&gt;&gt;&gt; transformer = FunctionTransformer(\n...     func=lambda frame: frame.filter(pl.col(\"col1\").is_in({2, 4}))\n... )\n&gt;&gt;&gt; transformer\nFunctionTransformer(func=&lt;function &lt;lambda&gt; at 0x...&gt;)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [1, 2, 3, 4, 5],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col4\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (2, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 str  \u2506 str  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2    \u2506 2    \u2506 2    \u2506 b    \u2502\n\u2502 4    \u2506 4    \u2506 4    \u2506 d    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.FunctionTransformer","title":"grizz.transformer.FunctionTransformer","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer that is a wrapper around a function to transform the DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[[DataFrame], DataFrame]</code> <p>The function to transform the DataFrame.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import FunctionTransformer\n&gt;&gt;&gt; transformer = FunctionTransformer(\n...     func=lambda frame: frame.filter(pl.col(\"col1\").is_in({2, 4}))\n... )\n&gt;&gt;&gt; transformer\nFunctionTransformer(func=&lt;function &lt;lambda&gt; at 0x...&gt;)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [1, 2, 3, 4, 5],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col4\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (2, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 str  \u2506 str  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2    \u2506 2    \u2506 2    \u2506 b    \u2502\n\u2502 4    \u2506 4    \u2506 4    \u2506 d    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.JsonDecode","title":"grizz.transformer.JsonDecode","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer to parse string values as JSON.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str]</code> <p>The columns to parse.</p> required <code>dtype</code> <code>PolarsDataType | PythonDataType | None</code> <p>The dtype to cast the extracted value to. If <code>None</code>, the dtype will be inferred from the JSON value.</p> <code>None</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import JsonDecode\n&gt;&gt;&gt; transformer = JsonDecode(columns=[\"col1\", \"col3\"])\n&gt;&gt;&gt; transformer\nJsonDecodeTransformer(columns=('col1', 'col3'), dtype=None)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [\"[1, 2]\", \"[2]\", \"[1, 2, 3]\", \"[4, 5]\", \"[5, 4]\"],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"['1', '2']\", \"['2']\", \"['1', '2', '3']\", \"['4', '5']\", \"['5', '4']\"],\n...         \"col4\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1      \u2506 col2 \u2506 col3            \u2506 col4 \u2502\n\u2502 ---       \u2506 ---  \u2506 ---             \u2506 ---  \u2502\n\u2502 str       \u2506 str  \u2506 str             \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 [1, 2]    \u2506 1    \u2506 ['1', '2']      \u2506 a    \u2502\n\u2502 [2]       \u2506 2    \u2506 ['2']           \u2506 b    \u2502\n\u2502 [1, 2, 3] \u2506 3    \u2506 ['1', '2', '3'] \u2506 c    \u2502\n\u2502 [4, 5]    \u2506 4    \u2506 ['4', '5']      \u2506 d    \u2502\n\u2502 [5, 4]    \u2506 5    \u2506 ['5', '4']      \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1      \u2506 col2 \u2506 col3            \u2506 col4 \u2502\n\u2502 ---       \u2506 ---  \u2506 ---             \u2506 ---  \u2502\n\u2502 list[i64] \u2506 str  \u2506 list[str]       \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 [1, 2]    \u2506 1    \u2506 [\"1\", \"2\"]      \u2506 a    \u2502\n\u2502 [2]       \u2506 2    \u2506 [\"2\"]           \u2506 b    \u2502\n\u2502 [1, 2, 3] \u2506 3    \u2506 [\"1\", \"2\", \"3\"] \u2506 c    \u2502\n\u2502 [4, 5]    \u2506 4    \u2506 [\"4\", \"5\"]      \u2506 d    \u2502\n\u2502 [5, 4]    \u2506 5    \u2506 [\"5\", \"4\"]      \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.JsonDecodeTransformer","title":"grizz.transformer.JsonDecodeTransformer","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer to parse string values as JSON.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str]</code> <p>The columns to parse.</p> required <code>dtype</code> <code>PolarsDataType | PythonDataType | None</code> <p>The dtype to cast the extracted value to. If <code>None</code>, the dtype will be inferred from the JSON value.</p> <code>None</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import JsonDecode\n&gt;&gt;&gt; transformer = JsonDecode(columns=[\"col1\", \"col3\"])\n&gt;&gt;&gt; transformer\nJsonDecodeTransformer(columns=('col1', 'col3'), dtype=None)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [\"[1, 2]\", \"[2]\", \"[1, 2, 3]\", \"[4, 5]\", \"[5, 4]\"],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"['1', '2']\", \"['2']\", \"['1', '2', '3']\", \"['4', '5']\", \"['5', '4']\"],\n...         \"col4\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1      \u2506 col2 \u2506 col3            \u2506 col4 \u2502\n\u2502 ---       \u2506 ---  \u2506 ---             \u2506 ---  \u2502\n\u2502 str       \u2506 str  \u2506 str             \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 [1, 2]    \u2506 1    \u2506 ['1', '2']      \u2506 a    \u2502\n\u2502 [2]       \u2506 2    \u2506 ['2']           \u2506 b    \u2502\n\u2502 [1, 2, 3] \u2506 3    \u2506 ['1', '2', '3'] \u2506 c    \u2502\n\u2502 [4, 5]    \u2506 4    \u2506 ['4', '5']      \u2506 d    \u2502\n\u2502 [5, 4]    \u2506 5    \u2506 ['5', '4']      \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1      \u2506 col2 \u2506 col3            \u2506 col4 \u2502\n\u2502 ---       \u2506 ---  \u2506 ---             \u2506 ---  \u2502\n\u2502 list[i64] \u2506 str  \u2506 list[str]       \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 [1, 2]    \u2506 1    \u2506 [\"1\", \"2\"]      \u2506 a    \u2502\n\u2502 [2]       \u2506 2    \u2506 [\"2\"]           \u2506 b    \u2502\n\u2502 [1, 2, 3] \u2506 3    \u2506 [\"1\", \"2\", \"3\"] \u2506 c    \u2502\n\u2502 [4, 5]    \u2506 4    \u2506 [\"4\", \"5\"]      \u2506 d    \u2502\n\u2502 [5, 4]    \u2506 5    \u2506 [\"5\", \"4\"]      \u2506 e    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.Replace","title":"grizz.transformer.Replace","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Replace the values in a column by the values in a mapping.</p> <p>Parameters:</p> Name Type Description Default <code>orig_column</code> <code>str</code> <p>The original column name.</p> required <code>final_column</code> <code>str</code> <p>The final column name.</p> required <code>*args</code> <code>Any</code> <p>The positional arguments to pass to <code>replace</code>.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments to pass to <code>replace</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import Replace\n&gt;&gt;&gt; transformer = Replace(\n...     orig_column=\"old\", final_column=\"new\", old={\"a\": 1, \"b\": 2, \"c\": 3}\n... )\n&gt;&gt;&gt; transformer\nReplaceTransformer(orig_column=old, final_column=new)\n&gt;&gt;&gt; frame = pl.DataFrame({\"old\": [\"a\", \"b\", \"c\", \"d\", \"e\"]})\n&gt;&gt;&gt; frame\nshape: (5, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 old \u2502\n\u2502 --- \u2502\n\u2502 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2502\n\u2502 b   \u2502\n\u2502 c   \u2502\n\u2502 d   \u2502\n\u2502 e   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 old \u2506 new \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 str \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1   \u2502\n\u2502 b   \u2506 2   \u2502\n\u2502 c   \u2506 3   \u2502\n\u2502 d   \u2506 d   \u2502\n\u2502 e   \u2506 e   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; transformer = Replace(\n...     orig_column=\"old\",\n...     final_column=\"new\",\n...     old={\"a\": 1, \"b\": 2, \"c\": 3},\n...     default=None,\n... )\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 old \u2506 new  \u2502\n\u2502 --- \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1    \u2502\n\u2502 b   \u2506 2    \u2502\n\u2502 c   \u2506 3    \u2502\n\u2502 d   \u2506 null \u2502\n\u2502 e   \u2506 null \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.ReplaceStrict","title":"grizz.transformer.ReplaceStrict","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Replace the values in a column by the values in a mapping.</p> <p>Parameters:</p> Name Type Description Default <code>orig_column</code> <code>str</code> <p>The original column name.</p> required <code>final_column</code> <code>str</code> <p>The final column name.</p> required <code>*args</code> <code>Any</code> <p>The positional arguments to pass to <code>replace</code>.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments to pass to <code>replace</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import ReplaceStrict\n&gt;&gt;&gt; transformer = ReplaceStrict(\n...     orig_column=\"old\", final_column=\"new\", old={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\n... )\n&gt;&gt;&gt; transformer\nReplaceStrictTransformer(orig_column=old, final_column=new)\n&gt;&gt;&gt; frame = pl.DataFrame({\"old\": [\"a\", \"b\", \"c\", \"d\", \"e\"]})\n&gt;&gt;&gt; frame\nshape: (5, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 old \u2502\n\u2502 --- \u2502\n\u2502 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2502\n\u2502 b   \u2502\n\u2502 c   \u2502\n\u2502 d   \u2502\n\u2502 e   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 old \u2506 new \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 str \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1   \u2502\n\u2502 b   \u2506 2   \u2502\n\u2502 c   \u2506 3   \u2502\n\u2502 d   \u2506 4   \u2502\n\u2502 e   \u2506 5   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; transformer = ReplaceStrict(\n...     orig_column=\"old\",\n...     final_column=\"new\",\n...     old={\"a\": 1, \"b\": 2, \"c\": 3},\n...     default=None,\n... )\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 old \u2506 new  \u2502\n\u2502 --- \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1    \u2502\n\u2502 b   \u2506 2    \u2502\n\u2502 c   \u2506 3    \u2502\n\u2502 d   \u2506 null \u2502\n\u2502 e   \u2506 null \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.ReplaceStrictTransformer","title":"grizz.transformer.ReplaceStrictTransformer","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Replace the values in a column by the values in a mapping.</p> <p>Parameters:</p> Name Type Description Default <code>orig_column</code> <code>str</code> <p>The original column name.</p> required <code>final_column</code> <code>str</code> <p>The final column name.</p> required <code>*args</code> <code>Any</code> <p>The positional arguments to pass to <code>replace</code>.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments to pass to <code>replace</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import ReplaceStrict\n&gt;&gt;&gt; transformer = ReplaceStrict(\n...     orig_column=\"old\", final_column=\"new\", old={\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\n... )\n&gt;&gt;&gt; transformer\nReplaceStrictTransformer(orig_column=old, final_column=new)\n&gt;&gt;&gt; frame = pl.DataFrame({\"old\": [\"a\", \"b\", \"c\", \"d\", \"e\"]})\n&gt;&gt;&gt; frame\nshape: (5, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 old \u2502\n\u2502 --- \u2502\n\u2502 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2502\n\u2502 b   \u2502\n\u2502 c   \u2502\n\u2502 d   \u2502\n\u2502 e   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 old \u2506 new \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 str \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1   \u2502\n\u2502 b   \u2506 2   \u2502\n\u2502 c   \u2506 3   \u2502\n\u2502 d   \u2506 4   \u2502\n\u2502 e   \u2506 5   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; transformer = ReplaceStrict(\n...     orig_column=\"old\",\n...     final_column=\"new\",\n...     old={\"a\": 1, \"b\": 2, \"c\": 3},\n...     default=None,\n... )\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 old \u2506 new  \u2502\n\u2502 --- \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1    \u2502\n\u2502 b   \u2506 2    \u2502\n\u2502 c   \u2506 3    \u2502\n\u2502 d   \u2506 null \u2502\n\u2502 e   \u2506 null \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.ReplaceTransformer","title":"grizz.transformer.ReplaceTransformer","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Replace the values in a column by the values in a mapping.</p> <p>Parameters:</p> Name Type Description Default <code>orig_column</code> <code>str</code> <p>The original column name.</p> required <code>final_column</code> <code>str</code> <p>The final column name.</p> required <code>*args</code> <code>Any</code> <p>The positional arguments to pass to <code>replace</code>.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments to pass to <code>replace</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import Replace\n&gt;&gt;&gt; transformer = Replace(\n...     orig_column=\"old\", final_column=\"new\", old={\"a\": 1, \"b\": 2, \"c\": 3}\n... )\n&gt;&gt;&gt; transformer\nReplaceTransformer(orig_column=old, final_column=new)\n&gt;&gt;&gt; frame = pl.DataFrame({\"old\": [\"a\", \"b\", \"c\", \"d\", \"e\"]})\n&gt;&gt;&gt; frame\nshape: (5, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 old \u2502\n\u2502 --- \u2502\n\u2502 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2502\n\u2502 b   \u2502\n\u2502 c   \u2502\n\u2502 d   \u2502\n\u2502 e   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 old \u2506 new \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 str \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1   \u2502\n\u2502 b   \u2506 2   \u2502\n\u2502 c   \u2506 3   \u2502\n\u2502 d   \u2506 d   \u2502\n\u2502 e   \u2506 e   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; transformer = Replace(\n...     orig_column=\"old\",\n...     final_column=\"new\",\n...     old={\"a\": 1, \"b\": 2, \"c\": 3},\n...     default=None,\n... )\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 old \u2506 new  \u2502\n\u2502 --- \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1    \u2502\n\u2502 b   \u2506 2    \u2502\n\u2502 c   \u2506 3    \u2502\n\u2502 d   \u2506 null \u2502\n\u2502 e   \u2506 null \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.Sequential","title":"grizz.transformer.Sequential","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a <code>polars.DataFrame</code> transformer to apply sequentially several transformers.</p> <p>Parameters:</p> Name Type Description Default <code>transformers</code> <code>Sequence[BaseTransformer | dict]</code> <p>The transformers or their configurations.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import (\n...     Sequential,\n...     Cast,\n... )\n&gt;&gt;&gt; transformer = Sequential(\n...     [\n...         Cast(columns=[\"col1\"], dtype=pl.Float32),\n...         Cast(columns=[\"col2\"], dtype=pl.Int64),\n...     ]\n... )\n&gt;&gt;&gt; transformer\nSequentialTransformer(\n  (0): CastTransformer(columns=('col1',), dtype=Float32)\n  (1): CastTransformer(columns=('col2',), dtype=Int64)\n)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [1, 2, 3, 4, 5],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"a \", \" b\", \"  c  \", \"d\", \"e\"],\n...         \"col4\": [\"a \", \" b\", \"  c  \", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3  \u2506 col4  \u2502\n\u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2502\n\u2502 i64  \u2506 str  \u2506 str   \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 a     \u2506 a     \u2502\n\u2502 2    \u2506 2    \u2506  b    \u2506  b    \u2502\n\u2502 3    \u2506 3    \u2506   c   \u2506   c   \u2502\n\u2502 4    \u2506 4    \u2506 d     \u2506 d     \u2502\n\u2502 5    \u2506 5    \u2506 e     \u2506 e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3  \u2506 col4  \u2502\n\u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2502\n\u2502 f32  \u2506 i64  \u2506 str   \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1.0  \u2506 1    \u2506 a     \u2506 a     \u2502\n\u2502 2.0  \u2506 2    \u2506  b    \u2506  b    \u2502\n\u2502 3.0  \u2506 3    \u2506   c   \u2506   c   \u2502\n\u2502 4.0  \u2506 4    \u2506 d     \u2506 d     \u2502\n\u2502 5.0  \u2506 5    \u2506 e     \u2506 e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.SequentialTransformer","title":"grizz.transformer.SequentialTransformer","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a <code>polars.DataFrame</code> transformer to apply sequentially several transformers.</p> <p>Parameters:</p> Name Type Description Default <code>transformers</code> <code>Sequence[BaseTransformer | dict]</code> <p>The transformers or their configurations.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import (\n...     Sequential,\n...     Cast,\n... )\n&gt;&gt;&gt; transformer = Sequential(\n...     [\n...         Cast(columns=[\"col1\"], dtype=pl.Float32),\n...         Cast(columns=[\"col2\"], dtype=pl.Int64),\n...     ]\n... )\n&gt;&gt;&gt; transformer\nSequentialTransformer(\n  (0): CastTransformer(columns=('col1',), dtype=Float32)\n  (1): CastTransformer(columns=('col2',), dtype=Int64)\n)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [1, 2, 3, 4, 5],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"a \", \" b\", \"  c  \", \"d\", \"e\"],\n...         \"col4\": [\"a \", \" b\", \"  c  \", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3  \u2506 col4  \u2502\n\u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2502\n\u2502 i64  \u2506 str  \u2506 str   \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 a     \u2506 a     \u2502\n\u2502 2    \u2506 2    \u2506  b    \u2506  b    \u2502\n\u2502 3    \u2506 3    \u2506   c   \u2506   c   \u2502\n\u2502 4    \u2506 4    \u2506 d     \u2506 d     \u2502\n\u2502 5    \u2506 5    \u2506 e     \u2506 e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3  \u2506 col4  \u2502\n\u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2502\n\u2502 f32  \u2506 i64  \u2506 str   \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1.0  \u2506 1    \u2506 a     \u2506 a     \u2502\n\u2502 2.0  \u2506 2    \u2506  b    \u2506  b    \u2502\n\u2502 3.0  \u2506 3    \u2506   c   \u2506   c   \u2502\n\u2502 4.0  \u2506 4    \u2506 d     \u2506 d     \u2502\n\u2502 5.0  \u2506 5    \u2506 e     \u2506 e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.Sort","title":"grizz.transformer.Sort","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer to sort the DataFrame by the given columns.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str]</code> <p>The columns to convert.</p> required <code>*args</code> <code>Any</code> <p>The positional arguments to pass to <code>sort</code>.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments to pass to <code>sort</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import Sort\n&gt;&gt;&gt; transformer = Sort(columns=[\"col3\", \"col1\"])\n&gt;&gt;&gt; transformer\nSortTransformer(columns=('col3', 'col1'))\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\"col1\": [1, 2, None], \"col2\": [6.0, 5.0, 4.0], \"col3\": [\"a\", \"c\", \"b\"]}\n... )\n&gt;&gt;&gt; frame\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 f64  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 6.0  \u2506 a    \u2502\n\u2502 2    \u2506 5.0  \u2506 c    \u2502\n\u2502 null \u2506 4.0  \u2506 b    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 f64  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 6.0  \u2506 a    \u2502\n\u2502 null \u2506 4.0  \u2506 b    \u2502\n\u2502 2    \u2506 5.0  \u2506 c    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.SortColumns","title":"grizz.transformer.SortColumns","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer to sort the DataFrame columns by name.</p> <p>Parameters:</p> Name Type Description Default <code>reverse</code> <code>bool</code> <p>If set to <code>False</code>, then the columns are sorted by alphabetical order.</p> <code>False</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import SortColumns\n&gt;&gt;&gt; transformer = SortColumns()\n&gt;&gt;&gt; transformer\nSortColumnsTransformer(reverse=False)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\"col2\": [1, 2, None], \"col3\": [6.0, 5.0, 4.0], \"col1\": [\"a\", \"c\", \"b\"]}\n... )\n&gt;&gt;&gt; frame\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col2 \u2506 col3 \u2506 col1 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 f64  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 6.0  \u2506 a    \u2502\n\u2502 2    \u2506 5.0  \u2506 c    \u2502\n\u2502 null \u2506 4.0  \u2506 b    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 str  \u2506 i64  \u2506 f64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a    \u2506 1    \u2506 6.0  \u2502\n\u2502 c    \u2506 2    \u2506 5.0  \u2502\n\u2502 b    \u2506 null \u2506 4.0  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.SortColumnsTransformer","title":"grizz.transformer.SortColumnsTransformer","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer to sort the DataFrame columns by name.</p> <p>Parameters:</p> Name Type Description Default <code>reverse</code> <code>bool</code> <p>If set to <code>False</code>, then the columns are sorted by alphabetical order.</p> <code>False</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import SortColumns\n&gt;&gt;&gt; transformer = SortColumns()\n&gt;&gt;&gt; transformer\nSortColumnsTransformer(reverse=False)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\"col2\": [1, 2, None], \"col3\": [6.0, 5.0, 4.0], \"col1\": [\"a\", \"c\", \"b\"]}\n... )\n&gt;&gt;&gt; frame\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col2 \u2506 col3 \u2506 col1 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 f64  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 6.0  \u2506 a    \u2502\n\u2502 2    \u2506 5.0  \u2506 c    \u2502\n\u2502 null \u2506 4.0  \u2506 b    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 str  \u2506 i64  \u2506 f64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a    \u2506 1    \u2506 6.0  \u2502\n\u2502 c    \u2506 2    \u2506 5.0  \u2502\n\u2502 b    \u2506 null \u2506 4.0  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.SortTransformer","title":"grizz.transformer.SortTransformer","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer to sort the DataFrame by the given columns.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str]</code> <p>The columns to convert.</p> required <code>*args</code> <code>Any</code> <p>The positional arguments to pass to <code>sort</code>.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments to pass to <code>sort</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import Sort\n&gt;&gt;&gt; transformer = Sort(columns=[\"col3\", \"col1\"])\n&gt;&gt;&gt; transformer\nSortTransformer(columns=('col3', 'col1'))\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\"col1\": [1, 2, None], \"col2\": [6.0, 5.0, 4.0], \"col3\": [\"a\", \"c\", \"b\"]}\n... )\n&gt;&gt;&gt; frame\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 f64  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 6.0  \u2506 a    \u2502\n\u2502 2    \u2506 5.0  \u2506 c    \u2502\n\u2502 null \u2506 4.0  \u2506 b    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 f64  \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 6.0  \u2506 a    \u2502\n\u2502 null \u2506 4.0  \u2506 b    \u2502\n\u2502 2    \u2506 5.0  \u2506 c    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.StripChars","title":"grizz.transformer.StripChars","text":"<p>               Bases: <code>BaseColumnsTransformer</code></p> <p>Implement a transformer to remove leading and trailing characters.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str] | None</code> <p>The columns to prepare. If <code>None</code>, it processes all the columns of type string.</p> <code>None</code> <code>ignore_missing</code> <code>bool</code> <p>If <code>False</code>, an exception is raised if a column is missing, otherwise just a warning message is shown.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments for <code>strip_chars</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import StripChars\n&gt;&gt;&gt; transformer = StripChars(columns=[\"col2\", \"col3\"])\n&gt;&gt;&gt; transformer\nStripCharsTransformer(columns=('col2', 'col3'), ignore_missing=False)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [1, 2, 3, 4, 5],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"a \", \" b\", \"  c  \", \"d\", \"e\"],\n...         \"col4\": [\"a \", \" b\", \"  c  \", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3  \u2506 col4  \u2502\n\u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2502\n\u2502 i64  \u2506 str  \u2506 str   \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 a     \u2506 a     \u2502\n\u2502 2    \u2506 2    \u2506  b    \u2506  b    \u2502\n\u2502 3    \u2506 3    \u2506   c   \u2506   c   \u2502\n\u2502 4    \u2506 4    \u2506 d     \u2506 d     \u2502\n\u2502 5    \u2506 5    \u2506 e     \u2506 e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4  \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---   \u2502\n\u2502 i64  \u2506 str  \u2506 str  \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 a    \u2506 a     \u2502\n\u2502 2    \u2506 2    \u2506 b    \u2506  b    \u2502\n\u2502 3    \u2506 3    \u2506 c    \u2506   c   \u2502\n\u2502 4    \u2506 4    \u2506 d    \u2506 d     \u2502\n\u2502 5    \u2506 5    \u2506 e    \u2506 e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.StripCharsTransformer","title":"grizz.transformer.StripCharsTransformer","text":"<p>               Bases: <code>BaseColumnsTransformer</code></p> <p>Implement a transformer to remove leading and trailing characters.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str] | None</code> <p>The columns to prepare. If <code>None</code>, it processes all the columns of type string.</p> <code>None</code> <code>ignore_missing</code> <code>bool</code> <p>If <code>False</code>, an exception is raised if a column is missing, otherwise just a warning message is shown.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments for <code>strip_chars</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import StripChars\n&gt;&gt;&gt; transformer = StripChars(columns=[\"col2\", \"col3\"])\n&gt;&gt;&gt; transformer\nStripCharsTransformer(columns=('col2', 'col3'), ignore_missing=False)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [1, 2, 3, 4, 5],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"a \", \" b\", \"  c  \", \"d\", \"e\"],\n...         \"col4\": [\"a \", \" b\", \"  c  \", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3  \u2506 col4  \u2502\n\u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2502\n\u2502 i64  \u2506 str  \u2506 str   \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 a     \u2506 a     \u2502\n\u2502 2    \u2506 2    \u2506  b    \u2506  b    \u2502\n\u2502 3    \u2506 3    \u2506   c   \u2506   c   \u2502\n\u2502 4    \u2506 4    \u2506 d     \u2506 d     \u2502\n\u2502 5    \u2506 5    \u2506 e     \u2506 e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2506 col3 \u2506 col4  \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---   \u2502\n\u2502 i64  \u2506 str  \u2506 str  \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2506 a    \u2506 a     \u2502\n\u2502 2    \u2506 2    \u2506 b    \u2506  b    \u2502\n\u2502 3    \u2506 3    \u2506 c    \u2506   c   \u2502\n\u2502 4    \u2506 4    \u2506 d    \u2506 d     \u2502\n\u2502 5    \u2506 5    \u2506 e    \u2506 e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.TimeDiff","title":"grizz.transformer.TimeDiff","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer to compute the time difference between consecutive time steps.</p> <p>Parameters:</p> Name Type Description Default <code>group_cols</code> <code>Sequence[str]</code> <p>The columns used to generate the group for each sequence.</p> required <code>time_col</code> <code>str</code> <p>The input time column name.</p> required <code>time_diff_col</code> <code>str</code> <p>The output time difference column name.</p> required <code>shift</code> <code>int</code> <p>The number of slots to shift.</p> <code>1</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import TimeDiff\n&gt;&gt;&gt; transformer = TimeDiff(group_cols=[\"col\"], time_col=\"time\", time_diff_col=\"diff\")\n&gt;&gt;&gt; transformer\nTimeDiffTransformer(group_cols=['col'], time_col=time, time_diff_col=diff, shift=1)\n&gt;&gt;&gt; frame = pl.DataFrame({\"col\": [\"a\", \"b\", \"a\", \"a\", \"b\"], \"time\": [1, 2, 3, 4, 5]})\n&gt;&gt;&gt; frame\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col \u2506 time \u2502\n\u2502 --- \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1    \u2502\n\u2502 b   \u2506 2    \u2502\n\u2502 a   \u2506 3    \u2502\n\u2502 a   \u2506 4    \u2502\n\u2502 b   \u2506 5    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col \u2506 time \u2506 diff \u2502\n\u2502 --- \u2506 ---  \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1    \u2506 0    \u2502\n\u2502 a   \u2506 3    \u2506 2    \u2502\n\u2502 a   \u2506 4    \u2506 1    \u2502\n\u2502 b   \u2506 2    \u2506 0    \u2502\n\u2502 b   \u2506 5    \u2506 3    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.TimeDiffTransformer","title":"grizz.transformer.TimeDiffTransformer","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer to compute the time difference between consecutive time steps.</p> <p>Parameters:</p> Name Type Description Default <code>group_cols</code> <code>Sequence[str]</code> <p>The columns used to generate the group for each sequence.</p> required <code>time_col</code> <code>str</code> <p>The input time column name.</p> required <code>time_diff_col</code> <code>str</code> <p>The output time difference column name.</p> required <code>shift</code> <code>int</code> <p>The number of slots to shift.</p> <code>1</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import TimeDiff\n&gt;&gt;&gt; transformer = TimeDiff(group_cols=[\"col\"], time_col=\"time\", time_diff_col=\"diff\")\n&gt;&gt;&gt; transformer\nTimeDiffTransformer(group_cols=['col'], time_col=time, time_diff_col=diff, shift=1)\n&gt;&gt;&gt; frame = pl.DataFrame({\"col\": [\"a\", \"b\", \"a\", \"a\", \"b\"], \"time\": [1, 2, 3, 4, 5]})\n&gt;&gt;&gt; frame\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col \u2506 time \u2502\n\u2502 --- \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1    \u2502\n\u2502 b   \u2506 2    \u2502\n\u2502 a   \u2506 3    \u2502\n\u2502 a   \u2506 4    \u2502\n\u2502 b   \u2506 5    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col \u2506 time \u2506 diff \u2502\n\u2502 --- \u2506 ---  \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1    \u2506 0    \u2502\n\u2502 a   \u2506 3    \u2506 2    \u2502\n\u2502 a   \u2506 4    \u2506 1    \u2502\n\u2502 b   \u2506 2    \u2506 0    \u2502\n\u2502 b   \u2506 5    \u2506 3    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.TimeToSecond","title":"grizz.transformer.TimeToSecond","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer to convert a column with time values to seconds.</p> <p>Parameters:</p> Name Type Description Default <code>in_col</code> <code>str</code> <p>The input column with the time value to convert.</p> required <code>out_col</code> <code>str</code> <p>The output column with the time in seconds.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import TimeToSecond\n&gt;&gt;&gt; transformer = TimeToSecond(in_col=\"time\", out_col=\"second\")\n&gt;&gt;&gt; transformer\nTimeToSecondTransformer(in_col=time, out_col=second)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"time\": [\n...             datetime.time(0, 0, 1, 890000),\n...             datetime.time(0, 1, 1, 890000),\n...             datetime.time(1, 1, 1, 890000),\n...             datetime.time(0, 19, 19, 890000),\n...             datetime.time(19, 19, 19, 890000),\n...         ],\n...         \"col\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...     },\n...     schema={\"time\": pl.Time, \"col\": pl.String},\n... )\n&gt;&gt;&gt; frame\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time         \u2506 col \u2502\n\u2502 ---          \u2506 --- \u2502\n\u2502 time         \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 00:00:01.890 \u2506 a   \u2502\n\u2502 00:01:01.890 \u2506 b   \u2502\n\u2502 01:01:01.890 \u2506 c   \u2502\n\u2502 00:19:19.890 \u2506 d   \u2502\n\u2502 19:19:19.890 \u2506 e   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time         \u2506 col \u2506 second   \u2502\n\u2502 ---          \u2506 --- \u2506 ---      \u2502\n\u2502 time         \u2506 str \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 00:00:01.890 \u2506 a   \u2506 1.89     \u2502\n\u2502 00:01:01.890 \u2506 b   \u2506 61.89    \u2502\n\u2502 01:01:01.890 \u2506 c   \u2506 3661.89  \u2502\n\u2502 00:19:19.890 \u2506 d   \u2506 1159.89  \u2502\n\u2502 19:19:19.890 \u2506 e   \u2506 69559.89 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.TimeToSecondTransformer","title":"grizz.transformer.TimeToSecondTransformer","text":"<p>               Bases: <code>BaseTransformer</code></p> <p>Implement a transformer to convert a column with time values to seconds.</p> <p>Parameters:</p> Name Type Description Default <code>in_col</code> <code>str</code> <p>The input column with the time value to convert.</p> required <code>out_col</code> <code>str</code> <p>The output column with the time in seconds.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import TimeToSecond\n&gt;&gt;&gt; transformer = TimeToSecond(in_col=\"time\", out_col=\"second\")\n&gt;&gt;&gt; transformer\nTimeToSecondTransformer(in_col=time, out_col=second)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"time\": [\n...             datetime.time(0, 0, 1, 890000),\n...             datetime.time(0, 1, 1, 890000),\n...             datetime.time(1, 1, 1, 890000),\n...             datetime.time(0, 19, 19, 890000),\n...             datetime.time(19, 19, 19, 890000),\n...         ],\n...         \"col\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...     },\n...     schema={\"time\": pl.Time, \"col\": pl.String},\n... )\n&gt;&gt;&gt; frame\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time         \u2506 col \u2502\n\u2502 ---          \u2506 --- \u2502\n\u2502 time         \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 00:00:01.890 \u2506 a   \u2502\n\u2502 00:01:01.890 \u2506 b   \u2502\n\u2502 01:01:01.890 \u2506 c   \u2502\n\u2502 00:19:19.890 \u2506 d   \u2502\n\u2502 19:19:19.890 \u2506 e   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time         \u2506 col \u2506 second   \u2502\n\u2502 ---          \u2506 --- \u2506 ---      \u2502\n\u2502 time         \u2506 str \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 00:00:01.890 \u2506 a   \u2506 1.89     \u2502\n\u2502 00:01:01.890 \u2506 b   \u2506 61.89    \u2502\n\u2502 01:01:01.890 \u2506 c   \u2506 3661.89  \u2502\n\u2502 00:19:19.890 \u2506 d   \u2506 1159.89  \u2502\n\u2502 19:19:19.890 \u2506 e   \u2506 69559.89 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.ToDatetime","title":"grizz.transformer.ToDatetime","text":"<p>               Bases: <code>BaseColumnsTransformer</code></p> <p>Implement a transformer to convert some columns to a <code>polars.Datetime</code> type.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str]</code> <p>The columns to convert.</p> required <code>format</code> <code>str | None</code> <p>Format to use for conversion. Refer to the chrono crate documentation for the full specification. Example: <code>\"%Y-%m-%d %H:%M:%S\"</code>. If set to <code>None</code> (default), the format is inferred from the data.</p> <code>None</code> <code>ignore_missing</code> <code>bool</code> <p>If <code>False</code>, an exception is raised if a column is missing, otherwise just a warning message is shown.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments for <code>to_datetime</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import ToDatetime\n&gt;&gt;&gt; transformer = ToDatetime(columns=[\"col1\"])\n&gt;&gt;&gt; transformer\nToDatetimeTransformer(columns=('col1',), format=None, ignore_missing=False)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [\n...             \"2020-01-01 01:01:01\",\n...             \"2020-01-01 02:02:02\",\n...             \"2020-01-01 12:00:01\",\n...             \"2020-01-01 18:18:18\",\n...             \"2020-01-01 23:59:59\",\n...         ],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\n...             \"2020-01-01 11:11:11\",\n...             \"2020-02-01 12:12:12\",\n...             \"2020-03-01 13:13:13\",\n...             \"2020-04-01 08:08:08\",\n...             \"2020-05-01 23:59:59\",\n...         ],\n...     },\n... )\n&gt;&gt;&gt; frame\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1                \u2506 col2 \u2506 col3                \u2502\n\u2502 ---                 \u2506 ---  \u2506 ---                 \u2502\n\u2502 str                 \u2506 str  \u2506 str                 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2020-01-01 01:01:01 \u2506 1    \u2506 2020-01-01 11:11:11 \u2502\n\u2502 2020-01-01 02:02:02 \u2506 2    \u2506 2020-02-01 12:12:12 \u2502\n\u2502 2020-01-01 12:00:01 \u2506 3    \u2506 2020-03-01 13:13:13 \u2502\n\u2502 2020-01-01 18:18:18 \u2506 4    \u2506 2020-04-01 08:08:08 \u2502\n\u2502 2020-01-01 23:59:59 \u2506 5    \u2506 2020-05-01 23:59:59 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1                \u2506 col2 \u2506 col3                \u2502\n\u2502 ---                 \u2506 ---  \u2506 ---                 \u2502\n\u2502 datetime[\u03bcs]        \u2506 str  \u2506 str                 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2020-01-01 01:01:01 \u2506 1    \u2506 2020-01-01 11:11:11 \u2502\n\u2502 2020-01-01 02:02:02 \u2506 2    \u2506 2020-02-01 12:12:12 \u2502\n\u2502 2020-01-01 12:00:01 \u2506 3    \u2506 2020-03-01 13:13:13 \u2502\n\u2502 2020-01-01 18:18:18 \u2506 4    \u2506 2020-04-01 08:08:08 \u2502\n\u2502 2020-01-01 23:59:59 \u2506 5    \u2506 2020-05-01 23:59:59 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.ToDatetimeTransformer","title":"grizz.transformer.ToDatetimeTransformer","text":"<p>               Bases: <code>BaseColumnsTransformer</code></p> <p>Implement a transformer to convert some columns to a <code>polars.Datetime</code> type.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str]</code> <p>The columns to convert.</p> required <code>format</code> <code>str | None</code> <p>Format to use for conversion. Refer to the chrono crate documentation for the full specification. Example: <code>\"%Y-%m-%d %H:%M:%S\"</code>. If set to <code>None</code> (default), the format is inferred from the data.</p> <code>None</code> <code>ignore_missing</code> <code>bool</code> <p>If <code>False</code>, an exception is raised if a column is missing, otherwise just a warning message is shown.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments for <code>to_datetime</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import ToDatetime\n&gt;&gt;&gt; transformer = ToDatetime(columns=[\"col1\"])\n&gt;&gt;&gt; transformer\nToDatetimeTransformer(columns=('col1',), format=None, ignore_missing=False)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [\n...             \"2020-01-01 01:01:01\",\n...             \"2020-01-01 02:02:02\",\n...             \"2020-01-01 12:00:01\",\n...             \"2020-01-01 18:18:18\",\n...             \"2020-01-01 23:59:59\",\n...         ],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\n...             \"2020-01-01 11:11:11\",\n...             \"2020-02-01 12:12:12\",\n...             \"2020-03-01 13:13:13\",\n...             \"2020-04-01 08:08:08\",\n...             \"2020-05-01 23:59:59\",\n...         ],\n...     },\n... )\n&gt;&gt;&gt; frame\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1                \u2506 col2 \u2506 col3                \u2502\n\u2502 ---                 \u2506 ---  \u2506 ---                 \u2502\n\u2502 str                 \u2506 str  \u2506 str                 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2020-01-01 01:01:01 \u2506 1    \u2506 2020-01-01 11:11:11 \u2502\n\u2502 2020-01-01 02:02:02 \u2506 2    \u2506 2020-02-01 12:12:12 \u2502\n\u2502 2020-01-01 12:00:01 \u2506 3    \u2506 2020-03-01 13:13:13 \u2502\n\u2502 2020-01-01 18:18:18 \u2506 4    \u2506 2020-04-01 08:08:08 \u2502\n\u2502 2020-01-01 23:59:59 \u2506 5    \u2506 2020-05-01 23:59:59 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1                \u2506 col2 \u2506 col3                \u2502\n\u2502 ---                 \u2506 ---  \u2506 ---                 \u2502\n\u2502 datetime[\u03bcs]        \u2506 str  \u2506 str                 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2020-01-01 01:01:01 \u2506 1    \u2506 2020-01-01 11:11:11 \u2502\n\u2502 2020-01-01 02:02:02 \u2506 2    \u2506 2020-02-01 12:12:12 \u2502\n\u2502 2020-01-01 12:00:01 \u2506 3    \u2506 2020-03-01 13:13:13 \u2502\n\u2502 2020-01-01 18:18:18 \u2506 4    \u2506 2020-04-01 08:08:08 \u2502\n\u2502 2020-01-01 23:59:59 \u2506 5    \u2506 2020-05-01 23:59:59 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.ToTime","title":"grizz.transformer.ToTime","text":"<p>               Bases: <code>BaseColumnsTransformer</code></p> <p>Implement a transformer to convert some columns to a <code>polars.Time</code> type.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str]</code> <p>The columns to convert.</p> required <code>format</code> <code>str | None</code> <p>Format to use for conversion. Refer to the chrono crate documentation for the full specification. Example: <code>\"%H:%M:%S\"</code>. If set to <code>None</code> (default), the format is inferred from the data.</p> <code>None</code> <code>ignore_missing</code> <code>bool</code> <p>If <code>False</code>, an exception is raised if a column is missing, otherwise just a warning message is shown.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments for <code>to_time</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import ToTime\n&gt;&gt;&gt; transformer = ToTime(columns=[\"col1\"], format=\"%H:%M:%S\")\n&gt;&gt;&gt; transformer\nToTimeTransformer(columns=('col1',), format=%H:%M:%S, ignore_missing=False)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [\"01:01:01\", \"02:02:02\", \"12:00:01\", \"18:18:18\", \"23:59:59\"],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"01:01:01\", \"02:02:02\", \"12:00:01\", \"18:18:18\", \"23:59:59\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1     \u2506 col2 \u2506 col3     \u2502\n\u2502 ---      \u2506 ---  \u2506 ---      \u2502\n\u2502 str      \u2506 str  \u2506 str      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 01:01:01 \u2506 1    \u2506 01:01:01 \u2502\n\u2502 02:02:02 \u2506 2    \u2506 02:02:02 \u2502\n\u2502 12:00:01 \u2506 3    \u2506 12:00:01 \u2502\n\u2502 18:18:18 \u2506 4    \u2506 18:18:18 \u2502\n\u2502 23:59:59 \u2506 5    \u2506 23:59:59 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1     \u2506 col2 \u2506 col3     \u2502\n\u2502 ---      \u2506 ---  \u2506 ---      \u2502\n\u2502 time     \u2506 str  \u2506 str      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 01:01:01 \u2506 1    \u2506 01:01:01 \u2502\n\u2502 02:02:02 \u2506 2    \u2506 02:02:02 \u2502\n\u2502 12:00:01 \u2506 3    \u2506 12:00:01 \u2502\n\u2502 18:18:18 \u2506 4    \u2506 18:18:18 \u2502\n\u2502 23:59:59 \u2506 5    \u2506 23:59:59 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.ToTimeTransformer","title":"grizz.transformer.ToTimeTransformer","text":"<p>               Bases: <code>BaseColumnsTransformer</code></p> <p>Implement a transformer to convert some columns to a <code>polars.Time</code> type.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>Sequence[str]</code> <p>The columns to convert.</p> required <code>format</code> <code>str | None</code> <p>Format to use for conversion. Refer to the chrono crate documentation for the full specification. Example: <code>\"%H:%M:%S\"</code>. If set to <code>None</code> (default), the format is inferred from the data.</p> <code>None</code> <code>ignore_missing</code> <code>bool</code> <p>If <code>False</code>, an exception is raised if a column is missing, otherwise just a warning message is shown.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments for <code>to_time</code>.</p> <code>{}</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import ToTime\n&gt;&gt;&gt; transformer = ToTime(columns=[\"col1\"], format=\"%H:%M:%S\")\n&gt;&gt;&gt; transformer\nToTimeTransformer(columns=('col1',), format=%H:%M:%S, ignore_missing=False)\n&gt;&gt;&gt; frame = pl.DataFrame(\n...     {\n...         \"col1\": [\"01:01:01\", \"02:02:02\", \"12:00:01\", \"18:18:18\", \"23:59:59\"],\n...         \"col2\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n...         \"col3\": [\"01:01:01\", \"02:02:02\", \"12:00:01\", \"18:18:18\", \"23:59:59\"],\n...     }\n... )\n&gt;&gt;&gt; frame\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1     \u2506 col2 \u2506 col3     \u2502\n\u2502 ---      \u2506 ---  \u2506 ---      \u2502\n\u2502 str      \u2506 str  \u2506 str      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 01:01:01 \u2506 1    \u2506 01:01:01 \u2502\n\u2502 02:02:02 \u2506 2    \u2506 02:02:02 \u2502\n\u2502 12:00:01 \u2506 3    \u2506 12:00:01 \u2502\n\u2502 18:18:18 \u2506 4    \u2506 18:18:18 \u2502\n\u2502 23:59:59 \u2506 5    \u2506 23:59:59 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; out = transformer.transform(frame)\n&gt;&gt;&gt; out\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1     \u2506 col2 \u2506 col3     \u2502\n\u2502 ---      \u2506 ---  \u2506 ---      \u2502\n\u2502 time     \u2506 str  \u2506 str      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 01:01:01 \u2506 1    \u2506 01:01:01 \u2502\n\u2502 02:02:02 \u2506 2    \u2506 02:02:02 \u2502\n\u2502 12:00:01 \u2506 3    \u2506 12:00:01 \u2502\n\u2502 18:18:18 \u2506 4    \u2506 18:18:18 \u2502\n\u2502 23:59:59 \u2506 5    \u2506 23:59:59 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.is_transformer_config","title":"grizz.transformer.is_transformer_config","text":"<pre><code>is_transformer_config(config: dict) -&gt; bool\n</code></pre> <p>Indicate if the input configuration is a configuration for a <code>BaseTransformer</code>.</p> <p>This function only checks if the value of the key  <code>_target_</code> is valid. It does not check the other values. If <code>_target_</code> indicates a function, the returned type hint is used to check the class.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>The configuration to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the input configuration is a configuration for a <code>BaseTransformer</code> object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import is_transformer_config\n&gt;&gt;&gt; is_transformer_config(\n...     {\n...         \"_target_\": \"grizz.transformer.Cast\",\n...         \"columns\": (\"col1\", \"col3\"),\n...         \"dtype\": pl.Int32,\n...     }\n... )\nTrue\n</code></pre>"},{"location":"refs/transformer/#grizz.transformer.setup_transformer","title":"grizz.transformer.setup_transformer","text":"<pre><code>setup_transformer(\n    transformer: BaseTransformer | dict,\n) -&gt; BaseTransformer\n</code></pre> <p>Set up a <code>polars.DataFrame</code> transformer.</p> <p>The transformer is instantiated from its configuration by using the <code>BaseTransformer</code> factory function.</p> <p>Parameters:</p> Name Type Description Default <code>transformer</code> <code>BaseTransformer | dict</code> <p>Specifies a <code>polars.DataFrame</code> transformer or its configuration.</p> required <p>Returns:</p> Type Description <code>BaseTransformer</code> <p>An instantiated transformer.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from grizz.transformer import setup_transformer\n&gt;&gt;&gt; transformer = setup_transformer(\n...     {\n...         \"_target_\": \"grizz.transformer.Cast\",\n...         \"columns\": (\"col1\", \"col3\"),\n...         \"dtype\": pl.Int32,\n...     }\n... )\n&gt;&gt;&gt; transformer\nCastTransformer(columns=('col1', 'col3'), dtype=Int32, ignore_missing=False)\n</code></pre>"},{"location":"refs/utils/","title":"utils","text":""},{"location":"refs/utils/#grizz.utils","title":"grizz.utils","text":"<p>Contain utility functions.</p>"}]}